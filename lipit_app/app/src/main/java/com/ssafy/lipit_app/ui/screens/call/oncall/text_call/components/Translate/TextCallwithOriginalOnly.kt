package com.ssafy.lipit_app.ui.screens.call.oncall.text_call.components.Translate

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.ssafy.lipit_app.ui.screens.call.oncall.text_call.TextCallState

@Composable
fun TextCallwithOriginalOnly(state: TextCallState) {
    val chatMessages = state.messages
    val scrollState = rememberScrollState()

    Log.d("TextCall", "üñºÔ∏è Î†åÎçîÎßÅ ÎåÄÏÉÅ Î©îÏãúÏßÄ Ïàò: ${chatMessages.size}")
    chatMessages.forEachIndexed { i, msg ->
        Log.d("TextCall", "üó®Ô∏è [$i] ${if (msg.isFromUser) "ÎÇò" else "AI"} ‚Üí ${msg.text}")
    }
    Log.d("TextCallFooter", "üì® SendMessage ÌÅ¥Î¶≠Îê®")

    // Ïä§ÌÅ¨Î°§ ÏÉÅÌÉú Î≥ÄÌôî Ïãú Îß® ÏïÑÎûòÎ°ú ÏûêÎèô Ïä§ÌÅ¨Î°§
    LaunchedEffect(chatMessages.size) {
        scrollState.animateScrollTo(scrollState.maxValue)
    }
    
    // ÏùºÎã® Î¶¨Ïä§Ìä∏Î°ú Íµ¨ÌòÑÌñàÏúºÎÇò Î∞± Ïó∞Îèô Ïãú Îã§Ïãú Í≥†Î†§
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(scrollState)
            .padding(top = 24.dp),
        verticalArrangement = Arrangement.spacedBy(17.dp)
    ) {
        chatMessages.forEach { message  ->
            Column(
                modifier = Modifier
                    .fillMaxWidth(),

                // ÎàÑÍ∞Ä Î≥¥ÎÇ∏ Î©îÏãúÏßÄÏù∏ÏßÄÏóê Îî∞Îùº Í∞ÄÎ°ú ÏúÑÏπò Î≥ÄÍ≤Ω
                horizontalAlignment = if (message.isFromUser) Alignment.End else Alignment.Start
            ) {
                Box(
                    modifier = Modifier
                        .background(
                            color = if (message.isFromUser) Color(0x99C494D9) else Color(
                                0x66000000
                            ),
                            shape = RoundedCornerShape(size = 15.dp)
                        )
                        .padding(14.dp)
                        .widthIn(max = 260.dp) // ÏµúÎåÄ Í∞ÄÎ°ú Í∏∏Ïù¥ Ï†úÌïú
                ) {
                    Column {
                        Text(
                            text = message.text,
                            style = TextStyle(
                                fontSize = 20.sp,
                                lineHeight = 30.sp,
                                fontWeight = FontWeight(590),
                                color = Color(0xFFFDF8FF)
                            )
                        )
                    }

                }
            }

        }
    }
}